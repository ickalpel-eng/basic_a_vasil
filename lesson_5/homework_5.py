# """
# ++++++++++++++++++++++++++++++++++++++++++++++++
# Списки
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Создание списков
# ================================================
# Создай список cities с элементами: "Москва", "Тверь", "Вологда".
cities = ["Москва", "Тверь", "Вологда"]
# Создай список numbers с целыми числами от 1 до 5.
numbers = [1, 2, 3, 4, 5]
# Создай список mixed с элементами разных типов: число, строка, булево значение, вещественное число.
mixed = [1, 3.4, True, "Привет"]
# ================================================
# 2. Доступ к элементам списка
# ================================================
# Выведи первый элемент списка cities.
print(cities[0])
# Выведи последний элемент списка numbers с помощью отрицательного индекса.
print(numbers[-1])
# Попробуй получить элемент с индексом 10 из cities. Что произойдет?
#print(cities[10])
# Произойдёт ошибка
# ================================================
# 3. Изменение элементов списка
# ================================================
# Замени второй элемент списка numbers на 10.
numbers[1] = 10
# Замени последний элемент списка mixed на "Python".
mixed[-1] = "Python"
print(mixed)
# ================================================
# 4. Функции для работы со списками
# ================================================
# Выведи длину списка numbers.
print(len(numbers))
# Найди максимальное и минимальное значение в numbers.
print(max(numbers))
print(min(numbers))
# Вычисли сумму всех элементов списка numbers.
print(sum(numbers))
# Отсортируй список numbers по возрастанию и убыванию.
print(sorted(numbers))
print(sorted(numbers, reverse= True))
# ================================================
# 5. Операции со списками
# ================================================
# Объедини два списка [1, 2, 3] и [4, 5].
print([1, 2, 3] + [4, 5])
# Продублируй список ["Python", "is", "awesome"] три раза.
print(["Python", "is", "awesome"] * 3)
# ================================================
# 6. Проверка вхождения
# ================================================
# Проверь, содержится ли число 3 в списке numbers.
print(3 in numbers)
# Проверь, содержится ли "Москва" в cities.
print("Москва" in cities)
# Проверь, содержится ли [1, 2] в mixed.
print([1, 2] in mixed)
# ================================================
# 7. Удаление элементов
# ================================================
# Удали третий элемент из numbers.
numbers.pop(2)

# Удали последний элемент из cities с помощью del.
del cities[-1]
# ================================================
# 8. Дополнительное задание
# ================================================
# Преобразуй строку "Python" в список символов.
lst = list("Python")
print(lst)
# Найди максимальный и минимальный символ в этом списке.
print(max(lst))
print(min(lst))
# Попробуй сложить все элементы списка. Что произойдет?
#print(sum(lst))
# Произойдёт ошибка
#
# ++++++++++++++++++++++++++++++++++++++++++++++++
# Срезы списков
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Создание и копирование списков
# ================================================
# Создай список с городами.
city = ["Москва", "Ростов", "Артём", "Казань"]
# Создай копию списка с помощью среза.
city2 = city[::]

# Проверь, является ли оригинальный список и его копия разными объектами.
print(id(city))
print(id(city2))
# ================================================
# 2. Извлечение элементов с помощью срезов
# ================================================
# Выведи 2-й и 3-й элементы списка с городами.
print(city)
# Выведи все элементы, начиная с 3-го.
print(city[3:])
# Выведи первые три элемента.
print(city[:3])
# Выведи весь список через срез.
print(city)
# Используй отрицательные индексы для выбора последних двух элементов.
print(city[-2], city[-1])
# ================================================
# 3. Использование шагов в срезах
# ================================================
# Выведи каждый второй элемент списка с городам.
print(city[1::2])
# Выведи список в обратном порядке.
print(city[::-1])
# Выведи каждый второй элемент с конца.
print(city[::-2])
# ================================================
# 4. Изменение элементов списка через срезы
# ================================================
# Замени 2-й и 3-й элементы списка с городами на "Сочи" и "Нижний Новгород".
city[2] = "Сочи"
city[3] = "Нижний Новгород"
print(city)
# Замени каждый второй элемент на "Город".
city[1::2] = ["Город"] * len(city[1::2])
print(city)
# Присвой новые значения кортежем: cities[1:3] = "Волгоград", "Омск".
cities[1:3] = "Волгоград", "Омск"
print(cities)
# ================================================
# 5. Операции с объединением списков
# ================================================
# Объедини два списка [1, 2, 3] и [4, 5, 6].
print([1, 2, 3] + [4, 5, 6])
# Продублируй список ["Python", "rocks"] два раза.
print(["Python", "rocks"] * 2)
# ================================================
# 6. Сравнение списков
# ================================================
# Сравни [1, 2, 3] и [1, 2, 3] – равны ли они?
print([1, 2, 3] == [1, 2, 3])
# Проверь, что [10, 5, 3] > [5, 10, 3].
print([10, 5, 3] > [5, 10, 3])
# Попробуй сравнить [1, 2, 3] и [1, 2, "abc"]. Что произойдет?
print([1, 2, 3] == [1, 2, "abc"])
# Можно только == или !=
# ================================================
# 7. Дополнительное задание
# ================================================
# Создай список chars = list("Python").
chars = list("Python")
# Выведи максимальный и минимальный символ в этом списке.
print(max(chars))
print(min(chars))
# Попробуй сложить все элементы списка chars. Объясни результат.
#print(sum(chars))
# sum() работает только с числами
# ++++++++++++++++++++++++++++++++++++++++++++++++
# Методы списков
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Добавление элементов
# ================================================
# Создай список numbers = [5, 10, 15].
numbers = [5, 10, 15]
# Добавь в конец списка число 20 с помощью append().
numbers.append(20)
# Вставь число 7 на второе место списка с помощью insert().
numbers.insert(1, 7)
print(numbers)
# Добавь строку "Python" в список numbers.
numbers.append("Python")
print(numbers)
# ================================================
# 2. Удаление элементов
# ================================================
# Удали число 10 из списка с помощью remove().
numbers.remove(10)
print(numbers)
# Удали последний элемент списка и выведи его (pop()).
remove = numbers.pop(-1)
print(remove)
# Удали элемент с индексом 1 с помощью pop().
removed = numbers.pop(1)
print(removed)
# Очисти весь список numbers.
numbers.clear()
print(numbers)
# ================================================
# 3. Копирование списков
# ================================================
# Создай список letters = ["a", "b", "c"].
letters = ["a", "b", "c"]
# Создай копию списка с помощью copy() и list().
copy1 = letters.copy()
# Проверь, являются ли оригинальный список и копия разными объектами.
print(id(letters))
print(id(copy1))
# ================================================
# 4. Поиск элементов
# ================================================
# Создай список marks = [2, 3, 5, 3, 4, 5, 2, 3].
marks = [2, 3, 5, 3, 4, 5, 2, 3]
# Определи, сколько раз встречается число 3 в списке (count()).
print(marks.count(3))
# Найди индекс первого вхождения числа 5 (index()).
print(marks.index(5))
# Проверь, содержится ли число 6 в списке перед вызовом index().
marks = [2, 3, 5, 3, 4, 5, 2, 3]
print(6 in marks)
# ================================================
# 5. Изменение порядка элементов
# ================================================
# Создай список nums = [8, 2, 5, 1, 7].
nums = [8, 2, 5, 1, 7]
# Отсортируй его по возрастанию (sort()).
nums.sort()
print(nums)
# Отсортируй его по убыванию (sort(reverse=True)).
nums.sort(reverse=True)
print(nums)
# Разверни список (reverse()).
nums.reverse()
print(nums)
# ================================================
# 6. Сортировка строк
# ================================================
# Создай список cities.
cities = ["Москва", "Казань", "Спб", "Волгоград", "Астрахань", "Лондон"]
# Отсортируй его в алфавитном порядке (sort()).
cities.sort()
print(cities)
# Создай новый отсортированный список с sorted(), не изменяя оригинал.
sorted_cities = sorted(cities)
# ================================================
# 7. Дополнительное задание
# ================================================
# Создай список символов chars = list("programming").
chars = list("programming")
# Определи количество вхождений буквы "g".
print(chars.count("g"))
# Разверни список символов (reverse()).
chars.reverse()
# Попробуй отсортировать список chars (sort()). Как изменится порядок букв?
chars.sort()
print(chars)
#По юникод возрастанию
# ++++++++++++++++++++++++++++++++++++++++++++++++
# Вложенные списки (массивы)
# ++++++++++++++++++++++++++++++++++++++++++++++++
# ================================================
# 1. Создание вложенного списка
# ================================================
# Создай двумерный список matrix, содержащий 3 строки и 4 столбца со значениями от 1 до 12.
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]
# Выведи всю матрицу на экран.
print(matrix)
# Выведи вторую строку.
print(matrix[1])
# Выведи первый элемент третьей строки.
print(matrix[2][0])
# ================================================
# 2. Изменение элементов вложенного списка
# ================================================
# Замени все элементы первой строки на 0.
matrix[0] = [0] * len(matrix[0])
print(matrix)
# Замени последний элемент второй строки на "Python".
matrix[1][-1] = "Python"
print(matrix)
# """